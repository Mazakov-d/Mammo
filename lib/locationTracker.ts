// lib/locationTracker.ts

import { supabase } from "./supabase";
import * as Location from "expo-location";
import { useLocationStore } from "../store/useUserLocationsStore";

export class LocationTracker {
  private locationSubscription: Location.LocationSubscription | null = null;

  /**
   * D√©marre le suivi de localisation en avant-plan (lorsque l'app est ouverte)
   */
  async startTracking() {
    // Demande la permission d'acc√®s √† la localisation
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== "granted") {
      console.error("üìç Permission de localisation refus√©e");
      return;
    }

    // Evite de cr√©er plusieurs subscriptions
    if (this.locationSubscription) {
      console.log("‚ö†Ô∏è Le suivi de localisation est d√©j√† actif");
      return;
    }

    // Lance watchPositionAsync pour recevoir des mises √† jour r√©guli√®res
    this.locationSubscription = await Location.watchPositionAsync(
      {
        accuracy: Location.Accuracy.Balanced,
        timeInterval: 300000, // toutes les 5 minutes
        distanceInterval: 150, // √† chaque changement
      },
      this.handleLocationUpdate.bind(this)
    );

    console.log("üöÄ Suivi de localisation d√©marr√©");
  }

  /**
   * G√®re chaque nouvelle position re√ßue
   */
  private async handleLocationUpdate(location: Location.LocationObject) {
    const { latitude, longitude } = location.coords;

    try {
      // R√©cup√®re l'utilisateur connect√©
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) return;

      // Met √† jour la table user_locations avec upsert
      const { error } = await supabase.from("user_locations").upsert(
        {
          user_id: user.id,
          latitude,
          longitude,
          updated_at: new Date().toISOString(),
        },
        { onConflict: "user_id" }
      );

      if (error) {
        console.error(
          "‚ùå Erreur lors de la mise √† jour de la localisation :",
          error.message
        );
      } else {
        console.log(
          `‚úÖ Localisation mise √† jour : ${latitude.toFixed(
            6
          )}, ${longitude.toFixed(6)}`
        );
      }
      console.log("latitude: ", latitude, "longitude: ", longitude);
      useLocationStore.setState({
        myLocation: { latitude, longitude },
      });
    } catch (err) {
      console.error(
        "‚ùå Exception lors de la mise √† jour de la localisation :",
        err
      );
    }
  }

  /**
   * Arr√™te le suivi de localisation
   */
  stopTracking() {
    if (this.locationSubscription) {
      this.locationSubscription.remove();
      this.locationSubscription = null;
      console.log("üõë Suivi de localisation arr√™t√©");
    } else {
      console.log("‚ö†Ô∏è Aucun suivi de localisation actif √† arr√™ter");
    }
  }
}

// Export d'une instance unique
export const locationTracker = new LocationTracker();
